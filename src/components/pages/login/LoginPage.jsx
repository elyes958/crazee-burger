import { useState } from "react";
import LoginForm from "./LoginForm";
import styled from "styled-components";
import Logo from "../../reusable-ui/Logo";

function LoginPage(params) {
    //affichage (render)
    return (
        <LoginPageStyled>
            <Logo/>
            <LoginForm/>
        </LoginPageStyled>
    )
}
// LoginForm semantiquement il signifie quelque chose c'est plus clair et plus propre de proc√©der comme √ßa(en decomposant en composant comme on a fait la)
export default LoginPage;


const LoginPageStyled = styled.div`       
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

&::before{
    content: "";
    background: url("/images/burger-and-fries-background.jpg")rgba(0, 0, 0, 0.7);
    background-size: cover;
    background-position: center;
    background-blend-mode: darken;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
  }
`;



// pour l'image il faut utiliser le pseudo class ::before, qui permet d'ajouter un element avant et apr√®s un certain element d√©fini, pour que cet √©lement apparaissent il faut ajouter la propriete content √† l'int√©rieur
// si ont aurai mis ::after √ßa aurait etait apr√®s l'element, css faut rechercher sur googl ne pas chercher √† retenir par coeur c'est une perte de temps, c'est avec la pratique que √ßa rentre
// comme ont met position absolute et 0 partout + le z-index notre content va passer sous l'element, si ont met 1 dans le z-index il va passer sur notre element(qui va donc ce retrouver en dessous)
// background-blend-mode: darken; nous permet de mettre l'opacit√© de l'image un peu comme sur la maquette en "sombre", + il faut rajouter le rgba(0, 0, 0, 0.7) sur le background-img n'oublie pas
//background-blend-mode: darken s'utilise uniquement avec : background: ... ; dont ses param√®tres ‚Üí url('...') ‚Üí rgba() ‚Üí pour sa couleur et l'opacit√© background: url('...') rgab(0,0,0,.75);
// üí° Afin d'√©viter toute l'impl√©mentation avec le before et les propri√©t√©s qui vont avec, il existe la propri√©t√© :
// background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${background})
// en plus la valeur linear-gradient permet directement de g√©rer l'opacit√© d√©sir√©e. C'√©tait le petit tips de l'int√©grateur.
// le "&::before" ligne 26 me permet d'eviter que le comportement before ce repete sur mes 2 element √† savoir logo et login Form , j'avais ce probleme je ne sais pas pourquoi sans mettre cela je me retrouver avec le background en plus derriere le logo au lieu de l'avoir qu'une seul fois pour toute ma page(test et tu verra l'effet)
// Eplication de chatGPT:
/**
 * content: ""; : Cette propri√©t√© est utilis√©e pour ins√©rer du contenu g√©n√©r√© avant le contenu de l'√©l√©ment. Dans ce cas, nous n'ins√©rons aucun contenu r√©el, nous utilisons simplement ce pseudo-√©l√©ment pour cr√©er un arri√®re-plan.
background: url("/images/burger-and-fries-background.jpg") rgba(0, 0, 0, 0.7); : Cette propri√©t√© d√©finit l'image de fond et la couleur de fond. L'image de fond est d√©finie avec l'URL "/images/burger-and-fries-background.jpg". La couleur de fond est d√©finie comme un noir semi-transparent avec une opacit√© de 0,7 (rgba(0, 0, 0, 0.7)).
background-size: cover; : Cette propri√©t√© d√©finit la taille de l'image de fond pour couvrir compl√®tement l'√©l√©ment conteneur, quelle que soit sa taille. Cela garantit que l'image de fond est toujours enti√®rement visible, m√™me si la taille de l'√©l√©ment change.
background-position: center; : Cette propri√©t√© d√©finit la position de l'image de fond par rapport √† l'√©l√©ment conteneur. En utilisant center, l'image est centr√©e horizontalement et verticalement dans l'√©l√©ment.
background-blend-mode: darken; : Cette propri√©t√© d√©finit le mode de fusion de l'image de fond avec la couleur de fond. Dans ce cas, le mode de fusion est d√©fini sur darken, ce qui fera en sorte que l'image de fond soit obscurcie par la couleur de fond.
position: absolute; : Cette propri√©t√© positionne l'√©l√©ment de mani√®re absolue par rapport √† son conteneur parent. Dans ce cas, cela signifie que l'√©l√©ment pseudo-√©l√©ment est positionn√© par rapport √† l'√©l√©ment parent, g√©n√©ralement le corps de la page.
top: 0;, left: 0;, right: 0;, bottom: 0; : Ces propri√©t√©s d√©finissent les distances entre les bords de l'√©l√©ment pseudo-√©l√©ment et les bords de son conteneur. En les d√©finissant √† 0, l'√©l√©ment pseudo-√©l√©ment est √©tir√© pour couvrir tout son conteneur.
z-index: -1; : Cette propri√©t√© d√©finit la pile de l'√©l√©ment par rapport aux autres √©l√©ments de la page. En d√©finissant z-index: -1;, l'√©l√©ment pseudo-√©l√©ment est positionn√© en arri√®re-plan par rapport aux autres √©l√©ments de la page.

Sans le &, les styles de ::before s'appliqueraient √† tous les enfants de LoginPageStyled, car ils ne seraient pas sp√©cifiquement li√©s √† LoginPageStyled lui-m√™me. Cela signifie que ::before agirait comme un arri√®re-plan pour tous les enfants de LoginPageStyled, y compris Logo et LoginForm.

En utilisant &::before, vous sp√©cifiez explicitement que le pseudo-√©l√©ment ::before est li√© √† LoginPageStyled et uniquement √† lui. Cela garantit que l'arri√®re-plan que vous avez d√©fini ne s'applique qu'√† LoginPageStyled et non √† ses enfants.

C'est pourquoi l'utilisation de &::before est importante dans ce cas pour garantir que l'arri√®re-plan s'applique uniquement √† l'ensemble de la page repr√©sent√©e par LoginPageStyled et non √† ses enfants individuels.
 */